{"ast":null,"code":"import streams from '../apis/streams';\nimport * as types from \"./types\";\nimport { history } from '../history';\nexport const signIn = userId => {\n  return {\n    type: types.SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: types.SIGN_OUT\n  };\n}; //async action creator requires middleware - redux-thunk\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const response = await streams.post('/streams', { ...formValues,\n    userId: getState().auth.userId\n  });\n  dispatch({\n    type: types.CREATE_STREAM,\n    payload: response.data\n  }); //programmatic navigation after successfull stream creation to send user back to stream list\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/:${id}`, formValues);\n  dispatch({\n    type: types.EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/:${id}`);\n  dispatch({\n    type: types.DELETE_STREAM,\n    payload: id\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: types.FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(`/streams`);\n  dispatch({\n    type: types.FETCH_STREAMS,\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/actions/index.js"],"names":["streams","types","history","signIn","userId","type","SIGN_IN","payload","signOut","SIGN_OUT","createStream","formValues","dispatch","getState","response","post","auth","CREATE_STREAM","data","editStream","id","put","EDIT_STREAM","deleteStream","delete","DELETE_STREAM","fetchStream","get","FETCH_STREAM","fetchStreams","FETCH_STREAMS"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEJ,KAAK,CAACK,OADT;AAEHC,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMI,OAAO,GAAG,MAAM;AACzB,SAAO;AACHH,IAAAA,IAAI,EAAEJ,KAAK,CAACQ;AADT,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMC,YAAY,GAAGC,UAAU,IAAK,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACrE,QAAMC,QAAQ,GAAG,MAAMd,OAAO,CAACe,IAAR,CAAa,UAAb,EAAyB,EAAC,GAAGJ,UAAJ;AAAgBP,IAAAA,MAAM,EAAES,QAAQ,GAAGG,IAAX,CAAgBZ;AAAxC,GAAzB,CAAvB;AAEAQ,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEJ,KAAK,CAACgB,aADP;AAELV,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAFb,GAAD,CAAR,CAHqE,CAQrE;AACH,CATM;AAWP,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAKT,UAAL,KAAqB,MAAMC,QAAN,IAAkB;AAC7D,QAAME,QAAQ,GAAG,MAAMd,OAAO,CAACqB,GAAR,CAAa,aAAYD,EAAG,EAA5B,EAA+BT,UAA/B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEJ,KAAK,CAACqB,WADP;AAELf,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMK,YAAY,GAAGH,EAAE,IAAK,MAAMR,QAAN,IAAkB;AACjD,QAAMZ,OAAO,CAACwB,MAAR,CAAgB,aAAYJ,EAAG,EAA/B,CAAN;AAEAR,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEJ,KAAK,CAACwB,aADP;AAELlB,IAAAA,OAAO,EAAEa;AAFJ,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMM,WAAW,GAAGN,EAAE,IAAK,MAAMR,QAAN,IAAkB;AAChD,QAAME,QAAQ,GAAG,MAAMd,OAAO,CAAC2B,GAAR,CAAa,YAAWP,EAAG,EAA3B,CAAvB;AAEAR,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEJ,KAAK,CAAC2B,YADP;AAELrB,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMW,YAAY,GAAG,MAAO,MAAMjB,QAAN,IAAkB;AACjD,QAAME,QAAQ,GAAG,MAAMd,OAAO,CAAC2B,GAAR,CAAa,UAAb,CAAvB;AAEAf,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEJ,KAAK,CAAC6B,aADP;AAELvB,IAAAA,OAAO,EAAEO,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CAPM","sourcesContent":["import streams from '../apis/streams';\nimport * as types from \"./types\";\nimport { history } from '../history';\n\nexport const signIn = (userId) => {\n    return {\n        type: types.SIGN_IN,\n        payload: userId\n    }\n}\n\nexport const signOut = () => {\n    return {\n        type: types.SIGN_OUT\n    }\n}\n\n//async action creator requires middleware - redux-thunk\nexport const createStream = formValues =>  async (dispatch, getState) => {\n    const response = await streams.post('/streams', {...formValues, userId: getState().auth.userId});\n\n    dispatch({\n        type: types.CREATE_STREAM,\n        payload: response.data\n    })\n\n    //programmatic navigation after successfull stream creation to send user back to stream list\n}\n\nexport const editStream = (id, formValues) =>  async dispatch => {\n    const response = await streams.put(`/streams/:${id}`, formValues);\n\n    dispatch({\n        type: types.EDIT_STREAM,\n        payload: response.data\n    })\n}\n\nexport const deleteStream = id =>  async dispatch => {\n    await streams.delete(`/streams/:${id}`);\n\n    dispatch({\n        type: types.DELETE_STREAM,\n        payload: id\n    })\n}\n\nexport const fetchStream = id =>  async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n\n    dispatch({\n        type: types.FETCH_STREAM,\n        payload: response.data\n    })\n}\n\nexport const fetchStreams = () =>  async dispatch => {\n    const response = await streams.get(`/streams`);\n\n    dispatch({\n        type: types.FETCH_STREAMS,\n        payload: response.data\n    })\n}\n"]},"metadata":{},"sourceType":"module"}