{"ast":null,"code":"var _jsxFileName = \"/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/GoogleAuth.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      isSignedIn ? this.props.signIn() : this.props.signOut();\n    };\n\n    this.onSignInClick = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n  }\n\n  componentDidMount() {\n    //gapi - var available in window scope after linking Oauth library\n    //library is extremely lightweight and every functionality must be additionally loaded\n    //we load only functionality we will use\n    window.gapi.load('client:auth2', () => {\n      //initialize with our key\n      window.gapi.client.init({\n        clientId: '779770667112-u21la91tp5q28ikql3hcpnt2m4pibpvc.apps.googleusercontent.com',\n        scope: 'email'\n      }).then(() => {\n        //when initialized get info and set to state is user authenticated or not\n        this.auth = window.gapi.auth2.getAuthInstance(); //get initial status from library and save to redux using appropriate action\n\n        this.onAuthChange(this.auth.isSignedIn.get(this.auth.currentUser.get().getId()));\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) return null;else if (this.props.isSignedIn) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"ui red google button\",\n        onClick: this.onSignOutClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"google icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }), \"Sign Out\");\n    }\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui red google button\",\n      onClick: this.onSignInClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"google icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }), \"Sign In\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 16\n      }\n    }, this.renderAuthButton());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","onAuthChange","isSignedIn","props","onSignInClick","auth","onSignOutClick","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","get","currentUser","getId","listen","renderAuthButton","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,YAAhC;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAoBrCC,YApBqC,GAoBrBC,UAAD,IAAgB;AAC3BA,MAAAA,UAAU,GAAG,KAAKC,KAAL,CAAWN,MAAX,EAAH,GAAyB,KAAKM,KAAL,CAAWL,OAAX,EAAnC;AACH,KAtBoC;;AAAA,SAwBrCM,aAxBqC,GAwBrB,MAAM;AAClB,WAAKC,IAAL,CAAUR,MAAV;AACH,KA1BoC;;AAAA,SA4BrCS,cA5BqC,GA4BpB,MAAM;AACnB,WAAKD,IAAL,CAAUP,OAAV;AACH,KA9BoC;AAAA;;AACrCS,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACA;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACnC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CAAwB;AACpBC,QAAAA,QAAQ,EAAE,0EADU;AAEpBC,QAAAA,KAAK,EAAE;AAFa,OAAxB,EAGGC,IAHH,CAGQ,MAAM;AACV;AACA,aAAKV,IAAL,GAAYG,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ,CAFU,CAGV;;AACA,aAAKhB,YAAL,CAAkB,KAAKI,IAAL,CAAUH,UAAV,CAAqBgB,GAArB,CAAyB,KAAKb,IAAL,CAAUc,WAAV,CAAsBD,GAAtB,GAA4BE,KAA5B,EAAzB,CAAlB;AACA,aAAKf,IAAL,CAAUH,UAAV,CAAqBmB,MAArB,CAA4B,KAAKpB,YAAjC;AACH,OATD;AAUH,KAZD;AAaH;;AAcDqB,EAAAA,gBAAgB,GAAG;AACf,QAAG,KAAKnB,KAAL,CAAWD,UAAX,KAA0B,IAA7B,EAAmC,OAAO,IAAP,CAAnC,KACK,IAAG,KAAKC,KAAL,CAAWD,UAAd,EAA0B;AAC3B,0BACI;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,OAAO,EAAE,KAAKI,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,aADJ;AAMH;AACD,wBACI;AAAQ,MAAA,SAAS,EAAC,sBAAlB;AAAyC,MAAA,OAAO,EAAE,KAAKF,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,YADJ;AAMH;;AAEDmB,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKD,gBAAL,EAAN,CAAP;AACH;;AApDoC;;AAuDzC,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHvB,IAAAA,UAAU,EAAEuB,KAAK,CAACpB,IAAN,CAAWH;AADpB,GAAP;AAGH,CAJD;;AAMA,eAAeN,OAAO,CAAC4B,eAAD,EAAkB;AAAC3B,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAlB,CAAP,CAA4CC,UAA5C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\n\nclass GoogleAuth extends React.Component {\n    componentDidMount() {\n        //gapi - var available in window scope after linking Oauth library\n        //library is extremely lightweight and every functionality must be additionally loaded\n        //we load only functionality we will use\n        window.gapi.load('client:auth2', () => {\n            //initialize with our key\n            window.gapi.client.init({\n                clientId: '779770667112-u21la91tp5q28ikql3hcpnt2m4pibpvc.apps.googleusercontent.com',\n                scope: 'email'\n            }).then(() => {\n                //when initialized get info and set to state is user authenticated or not\n                this.auth = window.gapi.auth2.getAuthInstance();\n                //get initial status from library and save to redux using appropriate action\n                this.onAuthChange(this.auth.isSignedIn.get(this.auth.currentUser.get().getId()));\n                this.auth.isSignedIn.listen(this.onAuthChange);\n            });\n        });\n    }\n\n    onAuthChange = (isSignedIn) => {\n        isSignedIn ? this.props.signIn() : this.props.signOut();\n    }\n\n    onSignInClick = () => {\n        this.auth.signIn();\n    }\n\n    onSignOutClick = () => {\n        this.auth.signOut();\n    }\n\n    renderAuthButton() {\n        if(this.props.isSignedIn === null) return null;\n        else if(this.props.isSignedIn) {\n            return (\n                <button className=\"ui red google button\" onClick={this.onSignOutClick}>\n                    <i className=\"google icon\" />\n                    Sign Out\n                </button>\n            )\n        }\n        return (\n            <button className=\"ui red google button\" onClick={this.onSignInClick}>\n                <i className=\"google icon\" />\n                Sign In\n            </button>\n        )\n    }\n    \n    render() {\n        return <div>{this.renderAuthButton()}</div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isSignedIn: state.auth.isSignedIn\n    }\n}\n\nexport default connect(mapStateToProps, {signIn, signOut})(GoogleAuth);\n"]},"metadata":{},"sourceType":"module"}