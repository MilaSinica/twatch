{"ast":null,"code":"var _jsxFileName = \"/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ui error message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9,\n            columnNumber: 21\n          }\n        }, error));\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n        type: \"text\"\n      }, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      })), renderError(meta));\n    };\n\n    this.onSubmit = formValues => {//redux-form passes all field values to our onSubmit handler\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      label: \"Enter Title\",\n      component: this.renderInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      label: \"Enter Description\",\n      component: this.renderInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }, \"Submit\")));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","onSubmit","formValues","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACvCC,WADuC,GACzB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,KAAsB;AAChC,UAAGD,KAAK,IAAIC,OAAZ,EAAqB;AACjB,4BACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBD,KAAzB,CADJ,CADJ;AAKH;AACJ,KATsC;;AAAA,SAcvCE,WAduC,GAczB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,eAGI;AAAO,QAAA,IAAI,EAAC;AAAZ,SAAuBD,KAAvB;AAA8B,QAAA,YAAY,EAAC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ,EAIKJ,WAAW,CAACM,IAAD,CAJhB,CADJ;AAQH,KAvBsC;;AAAA,SAyBvCC,QAzBuC,GAyB3BC,UAAD,IAAgB,CACvB;AACH,KA3BsC;AAAA;;AA6BvCC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAM,MAAA,SAAS,EAAC,SAAhB;AAA0B,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKJ,QAA7B,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,KAAK,EAAC,aAA1B;AAAwC,MAAA,SAAS,EAAE,KAAKJ,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,KAAK,EAAC,mBAAhC;AAAoD,MAAA,SAAS,EAAE,KAAKA,WAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CAFJ,CADJ;AAUH;;AAxCsC;;AA2C3C,MAAMS,QAAQ,GAAIJ,UAAD,IAAgB;AAC7B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AACD,MAAG,CAACN,UAAU,CAACO,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAWA,eAAehB,SAAS,CAAC;AACrBmB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZd,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n    renderError = ({error, touched}) => {\n        if(error && touched) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            )\n        }\n    }\n\n    // renderInput = (formProps) => <input type=\"text\" {...formProps.input} />\n\n    //input - comes from redux-form\n    renderInput = ({input, label, meta}) => {\n        return (\n            <div className=\"field\">\n                <label>{label}</label>\n                {/* add all redux-form input props to our input component */}\n                <input type=\"text\" {...input} autoComplete=\"off\"/>\n                {renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit = (formValues) => {\n        //redux-form passes all field values to our onSubmit handler\n    }\n\n    render() {\n        return (\n            <div>\n                {/* this.props.handelSubmit - comes from redux-form, pass our callback */}\n                <form className=\"ui form\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                    <Field name='title' label=\"Enter Title\" component={this.renderInput} />\n                    <Field name='description' label=\"Enter Description\" component={this.renderInput} />\n                    <button className=\"ui button primary\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n} \n\nconst validate = (formValues) => {\n    const errors = {};\n    if(!formValues.title) {\n        errors.title = \"You must enter a title\";\n    }\n    if(!formValues.description) {\n        errors.description = \"You must enter a description\";\n    }\n    return errors;\n}\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);\n"]},"metadata":{},"sourceType":"module"}