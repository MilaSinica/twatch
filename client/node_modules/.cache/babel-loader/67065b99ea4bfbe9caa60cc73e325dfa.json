{"ast":null,"code":"var _jsxFileName = \"/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Link from 'react-router-dom';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ui error message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 21\n          }\n        }, error));\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n        type: \"text\"\n      }, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => this.props.createStream(formValues);\n  }\n\n  renderCreateButton() {\n    if (this.props.isSignedIn) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }\n      }, \"Create Stream\"));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      label: \"Enter Title\",\n      component: this.renderInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      label: \"Enter Description\",\n      component: this.renderInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"Submit\")));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(mapStateToProps, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","Link","createStream","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","className","onSubmit","formValues","props","renderCreateButton","isSignedIn","render","handleSubmit","validate","errors","title","description","mapStateToProps","state","auth","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Link from 'react-router-dom';\nimport { createStream }  from '../../actions';\n\nclass StreamCreate extends React.Component {\n    renderError = ({error, touched}) => {\n        if(error && touched) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            )\n        }\n    }\n\n    // renderInput = (formProps) => <input type=\"text\" {...formProps.input} />\n    //input - comes from redux-form\n    renderInput = ({input, label, meta}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                {/* add all redux-form input props to our input component */}\n                <input type=\"text\" {...input} autoComplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    //redux-form passes all field values to our onSubmit handler\n    onSubmit = formValues => this.props.createStream(formValues);\n\n    renderCreateButton() {\n        if(this.props.isSignedIn) {\n            return (\n                <div>\n                    <Link>Create Stream</Link>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {/* this.props.handelSubmit - comes from redux-form, pass our callback */}\n                <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                    <Field name='title' label=\"Enter Title\" component={this.renderInput} />\n                    <Field name='description' label=\"Enter Description\" component={this.renderInput} />\n                    <button className=\"ui button primary\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n} \n\nconst validate = (formValues) => {\n    const errors = {};\n    if(!formValues.title) {\n        errors.title = \"You must enter a title\";\n    }\n    if(!formValues.description) {\n        errors.description = \"You must enter a description\";\n    }\n    return errors;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isSignedIn: state.auth.isSignedIn\n    }\n}\n\nconst formWrapped = reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);\n\nexport default connect(mapStateToProps, {createStream})(formWrapped);\n"]},"metadata":{},"sourceType":"module"}