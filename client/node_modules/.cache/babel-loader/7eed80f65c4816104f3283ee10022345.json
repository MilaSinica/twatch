{"ast":null,"code":"import streams from '../apis/streams';\nimport * as types from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: types.SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: types.SIGN_OUT\n  };\n}; //async action creator requires middleware - redux-thunk\n\nexport const createStream = formValues => async dispatch => {\n  const response = await streams.post('/streams', formValues);\n  dispatch({\n    type: types.CREATE_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/:${id}`, formValues);\n  dispatch({\n    type: types.EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/:${id}`);\n  dispatch({\n    type: types.DELETE_STREAM,\n    payload: id\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: types.FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(`/streams`);\n  console.log(response);\n  dispatch({\n    type: types.FETCH_STREAMS,\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/actions/index.js"],"names":["streams","types","signIn","userId","type","SIGN_IN","payload","signOut","SIGN_OUT","createStream","formValues","dispatch","response","post","CREATE_STREAM","data","editStream","id","put","EDIT_STREAM","deleteStream","delete","DELETE_STREAM","fetchStream","get","FETCH_STREAM","fetchStreams","console","log","FETCH_STREAMS"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEH,KAAK,CAACI,OADT;AAEHC,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMI,OAAO,GAAG,MAAM;AACzB,SAAO;AACHH,IAAAA,IAAI,EAAEH,KAAK,CAACO;AADT,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMC,YAAY,GAAGC,UAAU,IAAK,MAAMC,QAAN,IAAkB;AACzD,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACa,IAAR,CAAa,UAAb,EAAyBH,UAAzB,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACa,aADP;AAELR,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAKP,UAAL,KAAqB,MAAMC,QAAN,IAAkB;AAC7D,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACkB,GAAR,CAAa,aAAYD,EAAG,EAA5B,EAA+BP,UAA/B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACkB,WADP;AAELb,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMK,YAAY,GAAGH,EAAE,IAAK,MAAMN,QAAN,IAAkB;AACjD,QAAMX,OAAO,CAACqB,MAAR,CAAgB,aAAYJ,EAAG,EAA/B,CAAN;AAEAN,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACqB,aADP;AAELhB,IAAAA,OAAO,EAAEW;AAFJ,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMM,WAAW,GAAGN,EAAE,IAAK,MAAMN,QAAN,IAAkB;AAChD,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACwB,GAAR,CAAa,YAAWP,EAAG,EAA3B,CAAvB;AAEAN,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACwB,YADP;AAELnB,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMW,YAAY,GAAG,MAAO,MAAMf,QAAN,IAAkB;AACjD,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACwB,GAAR,CAAa,UAAb,CAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AAEAD,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAAC4B,aADP;AAELvB,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CARM","sourcesContent":["import streams from '../apis/streams';\nimport * as types from \"./types\"\n\nexport const signIn = (userId) => {\n    return {\n        type: types.SIGN_IN,\n        payload: userId\n    }\n}\n\nexport const signOut = () => {\n    return {\n        type: types.SIGN_OUT\n    }\n}\n\n//async action creator requires middleware - redux-thunk\nexport const createStream = formValues =>  async dispatch => {\n    const response = await streams.post('/streams', formValues);\n\n    dispatch({\n        type: types.CREATE_STREAM,\n        payload: response.data\n    })\n}\n\nexport const editStream = (id, formValues) =>  async dispatch => {\n    const response = await streams.put(`/streams/:${id}`, formValues);\n\n    dispatch({\n        type: types.EDIT_STREAM,\n        payload: response.data\n    })\n}\n\nexport const deleteStream = id =>  async dispatch => {\n    await streams.delete(`/streams/:${id}`);\n\n    dispatch({\n        type: types.DELETE_STREAM,\n        payload: id\n    })\n}\n\nexport const fetchStream = id =>  async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n\n    dispatch({\n        type: types.FETCH_STREAM,\n        payload: response.data\n    })\n}\n\nexport const fetchStreams = () =>  async dispatch => {\n    const response = await streams.get(`/streams`);\n    console.log(response);\n\n    dispatch({\n        type: types.FETCH_STREAMS,\n        payload: response.data\n    })\n}\n"]},"metadata":{},"sourceType":"module"}