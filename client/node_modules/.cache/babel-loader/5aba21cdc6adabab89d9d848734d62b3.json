{"ast":null,"code":"import streams from '../apis/streams';\nimport * as types from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: types.SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: types.SIGN_OUT\n  };\n}; //async action creator requires middleware - redux-thunk\n\nexport const createStream = formValues => async dispatch => {\n  const response = await streams.post('/streams', formValues);\n  dispatch({\n    type: types.CREATE_STREAM,\n    payload: response.data\n  });\n};\nexport const updateStream = (formValues, id) => async dispatch => {\n  const response = await streams.put(`/streams/:${id}`, formValues);\n  dispatch({\n    type: types.UPDATE_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  const response = await streams.delete(`/streams/:${id}`);\n  dispatch({\n    type: types.UPDATE_STREAM\n  });\n};\nexport const getStream = id => async dispatch => {\n  const response = await streams.get(`/streams/:${id}`);\n  dispatch({\n    type: types.UPDATE_STREAM,\n    payload: response.data\n  });\n};\nexport const getAllStreams = () => async dispatch => {\n  const response = await streams.get(`/streams`);\n  dispatch({\n    type: types.UPDATE_STREAM,\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/actions/index.js"],"names":["streams","types","signIn","userId","type","SIGN_IN","payload","signOut","SIGN_OUT","createStream","formValues","dispatch","response","post","CREATE_STREAM","data","updateStream","id","put","UPDATE_STREAM","deleteStream","delete","getStream","get","getAllStreams"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEH,KAAK,CAACI,OADT;AAEHC,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMI,OAAO,GAAG,MAAM;AACzB,SAAO;AACHH,IAAAA,IAAI,EAAEH,KAAK,CAACO;AADT,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMC,YAAY,GAAIC,UAAD,IAAiB,MAAOC,QAAP,IAAoB;AAC7D,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACa,IAAR,CAAa,UAAb,EAAyBH,UAAzB,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACa,aADP;AAELR,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,CAACN,UAAD,EAAaO,EAAb,KAAqB,MAAON,QAAP,IAAoB;AACjE,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACkB,GAAR,CAAa,aAAYD,EAAG,EAA5B,EAA+BP,UAA/B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACkB,aADP;AAELb,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMK,YAAY,GAAIH,EAAD,IAAS,MAAON,QAAP,IAAoB;AACrD,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACqB,MAAR,CAAgB,aAAYJ,EAAG,EAA/B,CAAvB;AAEAN,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACkB;AADP,GAAD,CAAR;AAGH,CANM;AAQP,OAAO,MAAMG,SAAS,GAAIL,EAAD,IAAS,MAAON,QAAP,IAAoB;AAClD,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACuB,GAAR,CAAa,aAAYN,EAAG,EAA5B,CAAvB;AAEAN,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACkB,aADP;AAELb,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMS,aAAa,GAAG,MAAO,MAAOb,QAAP,IAAoB;AACpD,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACuB,GAAR,CAAa,UAAb,CAAvB;AAEAZ,EAAAA,QAAQ,CAAC;AACLP,IAAAA,IAAI,EAAEH,KAAK,CAACkB,aADP;AAELb,IAAAA,OAAO,EAAEM,QAAQ,CAACG;AAFb,GAAD,CAAR;AAIH,CAPM","sourcesContent":["import streams from '../apis/streams';\nimport * as types from \"./types\"\n\nexport const signIn = (userId) => {\n    return {\n        type: types.SIGN_IN,\n        payload: userId\n    }\n}\n\nexport const signOut = () => {\n    return {\n        type: types.SIGN_OUT\n    }\n}\n\n//async action creator requires middleware - redux-thunk\nexport const createStream = (formValues) =>  async (dispatch) => {\n    const response = await streams.post('/streams', formValues);\n\n    dispatch({\n        type: types.CREATE_STREAM,\n        payload: response.data\n    })\n}\n\nexport const updateStream = (formValues, id) =>  async (dispatch) => {\n    const response = await streams.put(`/streams/:${id}`, formValues);\n\n    dispatch({\n        type: types.UPDATE_STREAM,\n        payload: response.data\n    })\n}\n\nexport const deleteStream = (id) =>  async (dispatch) => {\n    const response = await streams.delete(`/streams/:${id}`);\n\n    dispatch({\n        type: types.UPDATE_STREAM\n    })\n}\n\nexport const getStream = (id) =>  async (dispatch) => {\n    const response = await streams.get(`/streams/:${id}`);\n\n    dispatch({\n        type: types.UPDATE_STREAM,\n        payload: response.data\n    })\n}\n\nexport const getAllStreams = () =>  async (dispatch) => {\n    const response = await streams.get(`/streams`);\n\n    dispatch({\n        type: types.UPDATE_STREAM,\n        payload: response.data\n    })\n}\n"]},"metadata":{},"sourceType":"module"}