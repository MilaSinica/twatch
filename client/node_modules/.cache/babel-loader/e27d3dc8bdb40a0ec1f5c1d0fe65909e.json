{"ast":null,"code":"var _jsxFileName = \"/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  //use rtmp://localhost/live as server to watch the live stream. Stream key should be stream id\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buidPlayer();\n  }\n\n  componentDidUpdate() {\n    //in case player wasn't created on componentDidMount phase\n    this.buidPlayer();\n  }\n\n  buidPlayer() {\n    if (this.player || !this.props.stream) return;\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 20\n        }\n      }, \"Loading...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, title), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","flv","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buidPlayer","componentDidUpdate","player","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,WAAT,QAA6B,eAA7B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACrC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAA9B;AACA,SAAKN,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACA,SAAKG,UAAL;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB;AACA,SAAKD,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,QAAG,KAAKE,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWU,MAA9B,EAAsC;AACtC,UAAM;AAACN,MAAAA;AAAD,QAAO,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAA9B;AACA,SAAKG,MAAL,GAAcd,GAAG,CAACgB,YAAJ,CAAiB;AAC3BC,MAAAA,IAAI,EAAE,KADqB;AAE3BC,MAAAA,GAAG,EAAG,8BAA6BT,EAAG;AAFX,KAAjB,CAAd;AAIA,SAAKK,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,SAAKN,MAAL,CAAYO,IAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAG,CAAC,KAAKjB,KAAL,CAAWU,MAAf,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAED,UAAM;AAACQ,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKnB,KAAL,CAAWU,MAAxC;AAEA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAE,KAAKT,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAACmB,QAAAA,KAAK,EAAE;AAAR,OAAlC;AAAmD,MAAA,QAAQ,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHJ,CADJ;AAQH;;AA7CoC;;AAgDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AACHb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AADL,GAAP;AAGH,CAJD;;AAMA,eAAeV,OAAO,CAAC2B,eAAD,EAAkB;AAACzB,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\nimport { fetchStream }  from '../../actions';\n\nclass StreamShow extends React.Component {\n    //use rtmp://localhost/live as server to watch the live stream. Stream key should be stream id\n    constructor(props) {\n        super(props);\n\n        this.videoRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        this.props.fetchStream(id);\n        this.buidPlayer();\n    }\n\n    componentDidUpdate() {\n        //in case player wasn't created on componentDidMount phase\n        this.buidPlayer();\n    }\n\n    buidPlayer() {\n        if(this.player || !this.props.stream) return;\n        const {id} = this.props.match.params;\n        this.player = flv.createPlayer({\n            type: 'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n        });\n        this.player.attachMediaElement(this.videoRef.current);\n        this.player.load();\n    }\n\n    render() {\n        if(!this.props.stream) {\n            return <div>Loading...</div>\n        }\n\n        const {title, description} = this.props.stream;\n\n        return (\n            <div>\n                <video ref={this.videoRef} style={{width: '100%'}} controls={true} />\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        stream: state.streams[ownProps.match.params.id]\n    }\n}\n\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);\n"]},"metadata":{},"sourceType":"module"}