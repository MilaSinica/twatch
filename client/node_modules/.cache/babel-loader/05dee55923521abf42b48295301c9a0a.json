{"ast":null,"code":"var _jsxFileName = \"/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamEdit.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = formValues => {\n      this.props.editStream(this.props.stream.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 39\n      }\n    }, \"Loading...\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }, \"Edit a Stream\"), /*#__PURE__*/React.createElement(StreamForm, {\n      onSubmit: this.handleSubmit,\n      initialValues: _.pick(this.props.stream, \"title\", \"description\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  //turn stream object back to array, because it's easier to map over the array\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/twitch/streams/client/src/components/streams/StreamEdit.js"],"names":["React","_","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","handleSubmit","formValues","props","stream","id","componentDidMount","match","params","render","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAyC,eAAzC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAwC;AAAA;AAAA;;AAAA,SAKpCC,YALoC,GAKrBC,UAAU,IAAI;AACzB,WAAKC,KAAL,CAAWN,UAAX,CAAsB,KAAKM,KAAL,CAAWC,MAAX,CAAkBC,EAAxC,EAA4CH,UAA5C;AACH,KAPmC;AAAA;;AACpCI,EAAAA,iBAAiB,GAAG;AAChB,SAAKH,KAAL,CAAWP,WAAX,CAAuB,KAAKO,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBH,EAA/C;AACH;;AAMDI,EAAAA,MAAM,GAAG;AACL,QAAG,CAAC,KAAKN,KAAL,CAAWC,MAAf,EAAuB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACvB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAGI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE,KAAKH,YADnB;AAEI,MAAA,aAAa,EAAEP,CAAC,CAACgB,IAAF,CAAO,KAAKP,KAAL,CAAWC,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAUH;;AArBmC;;AAyBxC,MAAMO,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC;AACA,SAAO;AACHT,IAAAA,MAAM,EAAEQ,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACN,KAAT,CAAeC,MAAf,CAAsBH,EAApC;AADL,GAAP;AAGH,CALD;;AAOA,eAAeV,OAAO,CAACgB,eAAD,EAAkB;AAACf,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAlB,CAAP,CAAoDE,UAApD,CAAf","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream }  from '../../actions';\nimport StreamForm from './StreamForm';\n\nclass StreamEdit extends React.Component{\n    componentDidMount() {\n        this.props.fetchStream(this.props.match.params.id);\n    }\n\n    handleSubmit = formValues => {\n        this.props.editStream(this.props.stream.id, formValues);\n    }\n\n    render() {\n        if(!this.props.stream) return <div>Loading...</div>\n        return (\n            <div>\n                <h3>Edit a Stream</h3>\n                {/* initialValues special redux-form keyword, pass whole stream*/}\n                <StreamForm \n                    onSubmit={this.handleSubmit} \n                    initialValues={_.pick(this.props.stream, \"title\", \"description\")}\n                />\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    //turn stream object back to array, because it's easier to map over the array\n    return {\n        stream: state.streams[ownProps.match.params.id]\n    }\n}\n\nexport default connect(mapStateToProps, {fetchStream, editStream})(StreamEdit);\n"]},"metadata":{},"sourceType":"module"}